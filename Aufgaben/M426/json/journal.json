{
  "lessons": [
    {
      "title": "Lesson 1",
      "entries": [
        {
          "title": "Bootstrap Start",
          "description": "Started playing around with Bootstrap - created the website framework for the Informatics module."
        },
        {
          "title": "OneNote Structure",
          "description": "Created the OneNote file structure for the module."
        },
        {
          "title": "Glossary Work",
          "description": "Worked through a list of words, split them into three categories, and then explained the words."
        }
      ]
    },
    {
      "title": "Lesson 2",
      "entries": [
        {
          "title": "HTML Entities",
          "description": "Invisible character control. HTML uses certain characters like <, >, or & for tags and commands. To make sure these characters appear correctly as text, HTML entities are used. < becomes &lt;, > becomes &gt;, & becomes &amp;, \" becomes &quot;, and ' becomes &apos; (not compatible with HTML4). There are also special entities like &shy; for soft hyphens or &zwj; for zero-width joiners."
        },
        {
          "title": "Relative vs. Absolute Links",
          "description": "Absolute links contain the full URL (for example, https://example.com/page.html) and work anywhere. Relative links are shorter (for example, ../page.html) and only work within the same website. Absolute: \"https://example.com/home\" (works everywhere). Relative: \"../home\" (only works within the same folder structure)."
        },
        {
          "title": "CSS Units",
          "description": "em, vw, and vh. em: Based on the font size of the parent element. Can cascade, which might lead to unexpected effects. vw (Viewport Width): 1% of the browser window's width. vh (Viewport Height): 1% of the browser window's height. Problem: Mobile browsers change the height of 100vh when the address bar appears or disappears. Solution: Use 100lvh if available."
        },
        {
          "title": "Float as a Layout Tool",
          "description": "The old way of doing layouts. Float was originally meant for text wrapping around images but was used for full page layouts for years. Nowadays, Flexbox or Grid is the better option. float: right; makes an element float to the right, and text wraps around it on the left. Problem: Floating elements are ignored by their parent containers, so hacks like clearfix or overflow: hidden; were needed. Solution: Just use display: flex; or display: grid; instead."
        },
        {
          "title": "Task One Reflection",
          "description": "Most of the CSS was easy, except for centering, which turned into a real challenge. My main issue was not reading the task carefully, which led to unnecessary mistakes. Centering elements became frustrating because I went into full auto mode, adding things I didn’t need. I also struggled with adapting to another person’s coding style, making it hard to match my work to theirs."
        }
      ]
    },
    {
      "title": "Lesson 3",
      "entries": [
        {
          "title": "Cloning Elements in JavaScript",
          "description": "Today, I worked with cloneNode() for the first time. At first, it seemed simple—just make a copy of an element, and you’re done. But of course, it wasn’t that easy. I quickly realized that cloned elements don’t keep their event listeners, meaning a copied button won’t work unless I manually reattach the event. Definitely something to watch out for in the future.",
          "code": "let originalElement = document.getElementById(\"elementToClone\");\nlet clonedElement = originalElement.cloneNode(true);\ndocument.body.appendChild(clonedElement);"
        },
        {
          "title": "Legacy Async Function (Using Callbacks)",
          "description": "I finally experienced 'callback hell' today. Before async/await, JavaScript used callbacks for asynchronous tasks. The deeper I went, the messier it got—functions inside functions inside functions. Debugging was a nightmare, and I now understand why people avoid this approach whenever possible.",
          "code": "function fetchData(callback) {\n    let xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", \"https://jsonplaceholder.typicode.com/todos/1\", true);\n    xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n            callback(null, JSON.parse(xhr.responseText));\n        } else {\n            callback(new Error(\"Request failed\"), null);\n        }\n    };\n    xhr.send();\n}\n\nfetchData(function (error, data) {\n    if (error) {\n        console.error(\"Error:\", error);\n    } else {\n        console.log(\"Data:\", data);\n    }\n});"
        },
        {
          "title": "Modern Async Function (Using async/await)",
          "description": "After struggling with callbacks, I finally got to try async/await, and it was a huge relief. No more deeply nested functions, no more endless brackets. Just clean, readable code. I can’t imagine writing JavaScript without it now.",
          "code": "async function fetchData() {\n    try {\n        let response = await fetch('https://jsonplaceholder.typicode.com/todos/1');\n        let data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n\nfetchData();"
        },
        {
          "title": "Key Differences",
          "description": "Callbacks make the code harder to read and debug, while async/await keeps it clean and easy to follow. I wish I had started with async/await first. It just makes everything so much simpler."
        }
      ]
    }
  ]
}
